{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react software\\\\typing speed test\\\\typing-speed-test\\\\src\\\\webpages\\\\WritingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Timer from '../components/Timer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Modal from 'react-modal';\nimport TextInput from '../components/TextInput';\nimport TimerSection from '../components/TimerSection';\nimport TypingArea from '../components/TypingArea';\nimport ResultModal from '../components/ResultModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WritingPage = () => {\n  _s();\n  const [textInput, setTextInput] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isStarted, setIsStarted] = useState(false);\n  const [myWord, setMyWord] = useState(\"\");\n  const [incorrectCount, setIncorrectCount] = useState(0);\n  const [characters, setCharacters] = useState(0);\n  const generateRandomText = useCallback(() => {\n    const words = [\"Game\", \"is\", \"my\", \"sit\", \"Name\", \"constructor\", \"adipiscing\", \"chocolate\", \"sed\", \"do\", \"termper\", \"bestfriend\", \"Fight\", \"in\", \"manufacture\", \"eneyearfeast\", \"money\", \"magna\", \"aliqua\"];\n    const randomText = Array.from({\n      length: 250\n    }, () => words[Math.floor(Math.random() * words.length)]);\n    return randomText.join(\" \");\n  }, []);\n  useEffect(() => {\n    if (isStarted) {\n      setMyWord(generateRandomText());\n      setIncorrectCount(0);\n      setCharacters(0);\n    }\n  }, [isStarted, generateRandomText]);\n  const handleInputChange = value => {\n    if (isStarted) {\n      setTextInput(value);\n      let count = 0;\n      let count1 = 0;\n      const minLength = Math.min(myWord.length, value.length);\n      for (let i = 0; i < minLength; i++) {\n        if (myWord[i] !== value[i] && myWord[i] !== ' ' && value[i] !== ' ') {\n          count++; // Incorrect character\n        } else {\n          if (myWord[i] === ' ') {\n            count1++; // Space\n          } else if (myWord[i] === value[i]) {\n            count1++; // Correct character\n          }\n        }\n      }\n      setCharacters(count1);\n      setIncorrectCount(count);\n    }\n  };\n  const handleTimerComplete = value => {\n    if (value === 0) {\n      setIsModalOpen(true);\n      setIsStarted(false);\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleStart = () => {\n    setIsStarted(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TypingArea, {\n      myWord: myWord,\n      textInput: textInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      isStarted: isStarted,\n      textInput: textInput,\n      onInputChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerSection, {\n      isStarted: isStarted,\n      onTimerComplete: handleTimerComplete,\n      characters: characters,\n      incorrectCount: incorrectCount,\n      onHandleStart: handleStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n      isOpen: isModalOpen,\n      closeModal: closeModal,\n      characters: characters,\n      incorrectCount: incorrectCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(WritingPage, \"nKYn4+tmhlSp6B47w8hVgPEBzvI=\");\n_c = WritingPage;\nexport default WritingPage;\nvar _c;\n$RefreshReg$(_c, \"WritingPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Timer","Modal","TextInput","TimerSection","TypingArea","ResultModal","jsxDEV","_jsxDEV","WritingPage","_s","textInput","setTextInput","isModalOpen","setIsModalOpen","isStarted","setIsStarted","myWord","setMyWord","incorrectCount","setIncorrectCount","characters","setCharacters","generateRandomText","words","randomText","Array","from","length","Math","floor","random","join","handleInputChange","value","count","count1","minLength","min","i","handleTimerComplete","closeModal","handleStart","children","fileName","_jsxFileName","lineNumber","columnNumber","onInputChange","onTimerComplete","onHandleStart","isOpen","_c","$RefreshReg$"],"sources":["D:/React/react software/typing speed test/typing-speed-test/src/webpages/WritingPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Timer from '../components/Timer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Modal from 'react-modal';\r\nimport TextInput from '../components/TextInput';\r\nimport TimerSection from '../components/TimerSection';\r\nimport TypingArea from '../components/TypingArea';\r\nimport ResultModal from '../components/ResultModal';\r\n\r\nconst WritingPage = () => {\r\n  const [textInput, setTextInput] = useState(\"\");\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [myWord, setMyWord] = useState(\"\");\r\n  const [incorrectCount, setIncorrectCount] = useState(0);\r\n  const [characters, setCharacters] = useState(0);\r\n\r\n  const generateRandomText = useCallback(() => {\r\n    const words = [\r\n      \"Game\", \"is\", \"my\", \"sit\", \"Name\", \"constructor\",\r\n      \"adipiscing\", \"chocolate\", \"sed\", \"do\", \"termper\", \"bestfriend\",\r\n      \"Fight\", \"in\", \"manufacture\", \"eneyearfeast\", \"money\", \"magna\", \"aliqua\"\r\n    ];\r\n\r\n    const randomText = Array.from({ length: 250 }, () => words[Math.floor(Math.random() * words.length)]);\r\n    return randomText.join(\" \");\r\n  }, []); \r\n\r\n  useEffect(() => {\r\n    if (isStarted) {\r\n      setMyWord(generateRandomText());\r\n      setIncorrectCount(0);\r\n      setCharacters(0);\r\n    }\r\n  }, [isStarted, generateRandomText]);\r\n\r\n  const handleInputChange = (value) => {\r\n    if (isStarted) {\r\n      setTextInput(value);\r\n  \r\n      let count = 0;\r\n      let count1 = 0;\r\n      const minLength = Math.min(myWord.length, value.length);\r\n  \r\n      for (let i = 0; i < minLength; i++) {\r\n        if (myWord[i] !== value[i] && myWord[i] !== ' ' && value[i] !== ' ') {\r\n          count++; // Incorrect character\r\n        } else {\r\n          if (myWord[i] === ' ') {\r\n            count1++; // Space\r\n          } else if (myWord[i] === value[i]) {\r\n            count1++; // Correct character\r\n          }\r\n        }\r\n      }\r\n  \r\n      setCharacters(count1);\r\n      setIncorrectCount(count);\r\n    }\r\n  };\r\n  const handleTimerComplete = (value) => {\r\n    if (value === 0) {\r\n      setIsModalOpen(true);\r\n      setIsStarted(false);\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setIsStarted(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TypingArea myWord={myWord} textInput={textInput} />\r\n      <TextInput isStarted={isStarted} textInput={textInput} onInputChange={handleInputChange} />\r\n      <TimerSection\r\n        isStarted={isStarted}\r\n        onTimerComplete={handleTimerComplete}\r\n        characters={characters}\r\n        incorrectCount={incorrectCount}\r\n        onHandleStart={handleStart}\r\n      />\r\n      <ResultModal\r\n        isOpen={isModalOpen}\r\n        closeModal={closeModal}\r\n        characters={characters}\r\n        incorrectCount={incorrectCount}\r\n        \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WritingPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}